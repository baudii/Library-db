@using Microsoft.AspNetCore.Components;
@using System.Reflection;
@using System.Text.RegularExpressions;
@using System.Linq;
@using Library_MVC.Data.Static;

@model List<BookModel>
@{
	ViewData["Title"] = "Коллекция книг";
}
<h1>@ViewData["Title"]</h1>

<form asp-action="Index" method="get">
	<div class="form-row d-flex align-items-center">
		<div class="form-group col-md-4 mb-0">
			<input type="text" name="searchString" value="@ViewData["CurrentFilter"]" class="form-control" placeholder="Поиск..." />
		</div>
		<div class="ml-2">
			<button type="submit" class="btn btn-primary">Поиск</button>
		</div>
	</div>
</form>


<table class="table table-fixed">
	@{
		var columnWidths = new Dictionary<string, string>
		{
			{ "Id", "5%" },
			{ "Title", "30%" },
			{ "PublishedYear", "15%" },
			{ "Genre", "15%" },
			{ "Author", "20%" }
		};
	}
	<thead>
		<tr>
		@{
			var properties = typeof(BookModel).GetProperties();
			foreach (var prop in properties)
			{
				if (prop.Name.Contains("authorid", StringComparison.OrdinalIgnoreCase))
				{
					continue;
				}
				var res = Regex.Replace(prop.Name, "(\\B[A-Z])", " $1");
				res = Localization.GetRuBookColumnName(res);

				// Определяем параметр сортировки
				string sortParam;
				string sortIcon = "";

				if (ViewBag.CurrentSort == prop.Name + "_asc")
				{
					sortParam = prop.Name + "_desc";
					sortIcon = " ▲";
				}
				else if (ViewBag.CurrentSort == prop.Name + "_desc")
				{
					sortParam = prop.Name + "_asc";
					sortIcon = " ▼";
				}
				else
				{
					sortParam = prop.Name + "_asc";
				}

				string width = columnWidths.ContainsKey(prop.Name) ? columnWidths[prop.Name] : "auto";
				<th style="width:@width;">
					<a asp-action="Index" asp-route-sortOrder="@sortParam" asp-route-searchString="@ViewData["CurrentFilter"]" asp-route-pageNumber="@ViewBag.CurrentPage" 
																				class="link-primary link-offset-2 link-underline-opacity-25 link-underline-opacity-100-hover">
						@res @Html.Raw(sortIcon)
					</a>
				</th>
			}
		}
		</tr>
	</thead>
	<tbody asp-authorize asp-policy="ReadBook">
		@foreach (var book in Model)
		{
			<tr>
				@foreach (var prop in properties)
				{
					if (prop.Name.Contains("authorid", StringComparison.OrdinalIgnoreCase))
						continue;

					if (prop.Name.Contains("author", StringComparison.OrdinalIgnoreCase))
					{
						var author = prop.GetValue(book) as AuthorModel;
						if (author == null)
						{
							<td>
								Неизвестно
							</td>
							return;
						}

						<td>
							<a asp-action="Author" asp-route-id="@author!.Id">
								@author!.FullName
							</a>
						</td>
					}
					else
					{
						<td>
							@prop.GetValue(book)
						</td>
					}
				}
				<td asp-authorize asp-policy="@Policies.EditBook">
					<a asp-action="Edit" asp-route-id="@book.Id" class="btn btn-secondary">Edit</a>
					<a asp-authorize asp-policy="@Policies.DeleteBook" asp-action="Delete" asp-route-id="@book.Id" class="btn btn-danger">Delete</a>
				</td>
			</tr>
		}
	</tbody>
</table>
	<!-- Пагинация -->

<ul class="pagination">
@if (User.Identity!.IsAuthenticated)
{
	List<int> pages = new List<int>();

	// Первые страницы
	for (int i = 1; i <= Math.Min(4, ViewBag.TotalPages); i++)
	{
		pages.Add(i);
	}

	// Текущая страница и 3 страницы слева и справа от нее
	int start = Math.Max(ViewBag.CurrentPage - 3, 1);
	int end = Math.Min(ViewBag.CurrentPage + 3, ViewBag.TotalPages);
	for (int i = start; i <= end; i++)
	{
		if (!pages.Contains(i))
			pages.Add(i);
	}

	// Последние страницы
	for (int i = Math.Max(ViewBag.TotalPages - 3, 1); i <= ViewBag.TotalPages; i++)
	{
		if (!pages.Contains(i))
			pages.Add(i);
	}

	pages.Sort();
	
	if (ViewBag.CurrentPage > 1)
	{
		<li class="page-item">
			<a class="page-link" href="@Url.Action("Index", new { pageNumber = 1, sortOrder = ViewBag.CurrentSort })">Первая</a>
		</li>
	}

	int prevPage = 0;
	foreach (var p in pages)
	{
		if (prevPage != 0 && p - prevPage > 1)
		{
			<li class="page-item disabled"><span class="page-link">...</span></li>
		}

		<li class="page-item @(p == ViewBag.CurrentPage ? "active" : "")">
			<a class="page-link" href="@Url.Action("Index", new { pageNumber = p, sortOrder = ViewBag.CurrentSort })">@p</a>
		</li>
		prevPage = p;
	}

	if (ViewBag.CurrentPage < ViewBag.TotalPages)
	{
		<li class="page-item">
			<a class="page-link" href="@Url.Action("Index", new { pageNumber = ViewBag.TotalPages, sortOrder = ViewBag.CurrentSort })">Последняя</a>
		</li>
	}
}
</ul>
<a asp-authorize asp-policy="@Policies.CreateBook" asp-action="Create" class="btn btn-primary">Add New Book</a>


@if (!User.Identity!.IsAuthenticated)
{
	<h3>Войдите в аккаунт, чтобы просматривать библиотеку</h3>
}
<br />